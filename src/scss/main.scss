@use "colors";
@use "spacings";
@use "borders";
@use "utilities";
@use "sass:math";

@import url("https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&display=swap");

* {
  color: inherit;
  max-width: spacings.$max-website-width;
}

body {
  background-color: colors.$bg-color;
  color: colors.$text-color;
  font-family: "Nunito", sans-serif;
}

ul {
  padding: 0;
  list-style-type: none;
}

a {
  text-decoration: none;
}

hr {
  border: 0;
  border-top: 1px dotted #efefef;
}

img {
  max-width: 100%;
}

h1 {
  a {
    color: darkcyan;
  }
}

// Variables

button {
  min-width: min-content;
  min-height: 45px;
  border: 0;
  color: white;
  background-color: colors.$primary-color;
  border-radius: borders.$base-border-radius;
  padding: spacings.$base-padding;
}

.error {
  color: colors.$error-color;
  border-color: colors.$error-color;
  border-style: solid;
  margin: spacings.$base-margin;
  padding: spacings.$base-padding;
  border-radius: borders.$base-border-radius;
  border-width: borders.$base-border-thickness;
}

.notification {
  color: colors.$secondary-color;
  border-color: colors.$secondary-color;
  border-style: solid;
  margin: spacings.$base-margin;
  padding: spacings.$base-padding;
  border-radius: borders.$base-border-radius;
  border-width: borders.$base-border-thickness;
}

// Card component: (Nesting CSS rules)
.card {
  display: block;
  padding: spacings.$base-padding;
  border: borders.$base-border-thickness solid #ddd;
  box-shadow: spacings.$base-box-shadows;
  border-radius: math.div(borders.$base-border-radius, 2);

  .card-title {
    font-size: spacings.$font-size-lg;
    padding-bottom: spacings.$base-padding;
    font-weight: bold;
  }

  .card-body {
    font-size: spacings.$base-font-size;

    a {
      text-decoration: underline;
    }
  }
}

.test-button {
  background-color: map-get(colors.$colors, "purple");
}

// Mixins
@mixin btn($bg-color: darkblue) {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: spacings.$base-padding, spacings.$base-padding * 2;
  border-radius: borders.$base-border-radius;
  background-color: $bg-color;
}

.btn {
  @include btn;
}

// Functions:
@function light-comp($color) {
  $complement: complement($color);
  $light-complement: lighten($complement, 60%);
  @return $light-complement;
}

@each $key, $val in colors.$colors {
  .btn-#{$key} {
    @include btn($val);
    &:hover {
      background-color: lighten($val, 5);
    }
  }

  .btn-outlined-#{$key} {
    @include btn(#fff);
    color: black;
    border: borders.$base-border-thickness solid $val;
    &:hover {
      color: #fff;
      background-color: $val;
    }
  }

  .btn-complement-#{$key} {
    @include btn($val);
    color: light-comp($val);
    &:hover {
      color: $val;
      background-color: light-comp($val);
    }
  }
}

// Debug features
// @debug math.div(10, 7);
